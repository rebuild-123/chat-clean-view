import { cn } from "@/lib/utils";
import { Bot, User, File, FileText, Image as ImageIcon } from "lucide-react";
import ReactMarkdown from "react-markdown";

interface FileAttachment {
  name: string;
  type: string;
  url: string;
}

interface ChatMessageProps {
  message: string;
  isUser: boolean;
  files?: FileAttachment[];
}

export const ChatMessage = ({ message, isUser, files }: ChatMessageProps) => {
  const isImage = (type: string) => type.startsWith("image/");
  const isPdf = (type: string) => type === "application/pdf";

  return (
    <div
      className={cn(
        "flex gap-4 p-6 animate-fade-in",
        isUser ? "bg-muted/30" : "bg-background"
      )}
    >
      <div
        className={cn(
          "flex h-8 w-8 shrink-0 items-center justify-center rounded-lg",
          isUser
            ? "bg-[hsl(var(--chat-user-bg))] text-[hsl(var(--chat-user-fg))]"
            : "bg-[hsl(var(--chat-ai-bg))] text-[hsl(var(--chat-ai-fg))]"
        )}
      >
        {isUser ? <User className="h-5 w-5" /> : <Bot className="h-5 w-5" />}
      </div>
      <div className="flex-1 space-y-3 overflow-hidden">
        <p className="text-sm font-semibold">
          {isUser ? "You" : "Assistant"}
        </p>
        
        {files && files.length > 0 && (
          <div className="flex flex-wrap gap-3">
            {files.map((file, index) => (
              <div key={index} className="max-w-full">
                {isImage(file.type) ? (
                  <div className="rounded-lg overflow-hidden border bg-card max-w-sm">
                    <img
                      src={file.url}
                      alt={file.name}
                      className="w-full h-auto max-h-64 object-contain"
                    />
                    <div className="p-2 flex items-center gap-2 text-xs text-muted-foreground border-t">
                      <ImageIcon className="h-3 w-3" />
                      <span className="truncate">{file.name}</span>
                    </div>
                  </div>
                ) : isPdf(file.type) ? (
                  <a
                    href={file.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center gap-2 p-3 rounded-lg border bg-card hover:bg-accent transition-colors"
                  >
                    <FileText className="h-5 w-5 text-red-500" />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">{file.name}</p>
                      <p className="text-xs text-muted-foreground">PDF Document</p>
                    </div>
                  </a>
                ) : (
                  <a
                    href={file.url}
                    target="_blank"
                    rel="noopener noreferrer"
                    className="flex items-center gap-2 p-3 rounded-lg border bg-card hover:bg-accent transition-colors"
                  >
                    <File className="h-5 w-5" />
                    <div className="flex-1 min-w-0">
                      <p className="text-sm font-medium truncate">{file.name}</p>
                      <p className="text-xs text-muted-foreground">{file.type || "File"}</p>
                    </div>
                  </a>
                )}
              </div>
            ))}
          </div>
        )}

        {message && (
          <div>
            {isUser ? (
              <div className="prose prose-sm max-w-none dark:prose-invert">
                <p className="leading-7 whitespace-pre-wrap">{message}</p>
              </div>
            ) : files && files.length > 0 ? (
              <div className="bg-card border rounded-lg shadow-sm">
                <div className="p-6 space-y-6">
                  {/* Report Header */}
                  <div className="border-b pb-4">
                    <h2 className="text-xl font-bold text-foreground mb-2">Analysis Report</h2>
                    <div className="flex items-center justify-between text-xs text-muted-foreground">
                      <span>Generated by AI Assistant</span>
                      <span>
                        {new Date().toLocaleDateString('en-US', { 
                          year: 'numeric', 
                          month: 'long', 
                          day: 'numeric',
                          hour: '2-digit',
                          minute: '2-digit'
                        })}
                      </span>
                    </div>
                  </div>
                  
                  {/* Report Content */}
                  <div className="space-y-4 report-content">
                    <ReactMarkdown
                      components={{
                        h1: ({children}) => (
                          <h1 className="text-2xl font-bold text-foreground mb-3 pb-2 border-b">{children}</h1>
                        ),
                        h2: ({children}) => (
                          <h2 className="text-xl font-semibold text-foreground mb-3 mt-6">{children}</h2>
                        ),
                        h3: ({children}) => (
                          <h3 className="text-lg font-semibold text-foreground mb-2 mt-4">{children}</h3>
                        ),
                        h4: ({children}) => (
                          <h4 className="text-base font-semibold text-foreground mb-2 mt-3">{children}</h4>
                        ),
                        p: ({children}) => (
                          <p className="text-sm leading-relaxed text-foreground mb-3">{children}</p>
                        ),
                        ul: ({children}) => (
                          <ul className="list-disc list-inside space-y-2 mb-4 ml-4">{children}</ul>
                        ),
                        ol: ({children}) => (
                          <ol className="list-decimal list-inside space-y-2 mb-4 ml-4">{children}</ol>
                        ),
                        li: ({children}) => (
                          <li className="text-sm text-foreground leading-relaxed">{children}</li>
                        ),
                        strong: ({children}) => (
                          <strong className="font-semibold text-foreground">{children}</strong>
                        ),
                        em: ({children}) => (
                          <em className="italic text-foreground">{children}</em>
                        ),
                        blockquote: ({children}) => (
                          <blockquote className="border-l-4 border-primary pl-4 py-2 my-4 bg-muted/50 italic text-muted-foreground">
                            {children}
                          </blockquote>
                        ),
                        code: ({children}) => (
                          <code className="bg-muted px-1.5 py-0.5 rounded text-sm font-mono">{children}</code>
                        ),
                        pre: ({children}) => (
                          <pre className="bg-muted p-4 rounded-lg overflow-x-auto mb-4">
                            <code className="text-sm font-mono">{children}</code>
                          </pre>
                        ),
                      }}
                    >
                      {message}
                    </ReactMarkdown>
                  </div>
                  
                  {/* Report Footer */}
                  <div className="border-t pt-4 mt-6">
                    <p className="text-xs text-muted-foreground">
                      <strong>Disclaimer:</strong> This report was generated by AI. Please verify important information independently.
                    </p>
                  </div>
                </div>
              </div>
            ) : (
              <div className="prose prose-sm max-w-none dark:prose-invert">
                <ReactMarkdown>{message}</ReactMarkdown>
              </div>
            )}
          </div>
        )}
      </div>
    </div>
  );
};
